// Code generated by MockGen. DO NOT EDIT.
// Source: reader.go

// Package reader is a generated GoMock package.
package reader

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLenByteReader is a mock of LenByteReader interface.
type MockLenByteReader struct {
	ctrl     *gomock.Controller
	recorder *MockLenByteReaderMockRecorder
}

// MockLenByteReaderMockRecorder is the mock recorder for MockLenByteReader.
type MockLenByteReaderMockRecorder struct {
	mock *MockLenByteReader
}

// NewMockLenByteReader creates a new mock instance.
func NewMockLenByteReader(ctrl *gomock.Controller) *MockLenByteReader {
	mock := &MockLenByteReader{ctrl: ctrl}
	mock.recorder = &MockLenByteReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLenByteReader) EXPECT() *MockLenByteReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockLenByteReader) Read() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockLenByteReaderMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockLenByteReader)(nil).Read))
}
