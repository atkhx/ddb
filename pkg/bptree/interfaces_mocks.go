// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package bptree is a generated GoMock package.
package bptree

import (
	reflect "reflect"

	internal "github.com/atkhx/ddb/internal"
	gomock "github.com/golang/mock/gomock"
)

// MockTree is a mock of Tree interface.
type MockTree struct {
	ctrl     *gomock.Controller
	recorder *MockTreeMockRecorder
}

// MockTreeMockRecorder is the mock recorder for MockTree.
type MockTreeMockRecorder struct {
	mock *MockTree
}

// NewMockTree creates a new mock instance.
func NewMockTree(ctrl *gomock.Controller) *MockTree {
	mock := &MockTree{ctrl: ctrl}
	mock.recorder = &MockTreeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTree) EXPECT() *MockTreeMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTree) Get(arg0 internal.Key) internal.Row {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(internal.Row)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockTreeMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTree)(nil).Get), arg0)
}

// Set mocks base method.
func (m *MockTree) Set(arg0 internal.Key, arg1 internal.Row) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0, arg1)
}

// Set indicates an expected call of Set.
func (mr *MockTreeMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTree)(nil).Set), arg0, arg1)
}

// MockItem is a mock of Item interface.
type MockItem struct {
	ctrl     *gomock.Controller
	recorder *MockItemMockRecorder
}

// MockItemMockRecorder is the mock recorder for MockItem.
type MockItemMockRecorder struct {
	mock *MockItem
}

// NewMockItem creates a new mock instance.
func NewMockItem(ctrl *gomock.Controller) *MockItem {
	mock := &MockItem{ctrl: ctrl}
	mock.recorder = &MockItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItem) EXPECT() *MockItemMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockItem) Get(arg0 internal.Key) internal.Row {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(internal.Row)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockItemMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockItem)(nil).Get), arg0)
}

// Set mocks base method.
func (m *MockItem) Set(arg0 internal.Key, arg1 internal.Row) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0, arg1)
}

// Set indicates an expected call of Set.
func (mr *MockItemMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockItem)(nil).Set), arg0, arg1)
}

// Split mocks base method.
func (m *MockItem) Split() (internal.Key, Item) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Split")
	ret0, _ := ret[0].(internal.Key)
	ret1, _ := ret[1].(Item)
	return ret0, ret1
}

// Split indicates an expected call of Split.
func (mr *MockItemMockRecorder) Split() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Split", reflect.TypeOf((*MockItem)(nil).Split))
}
