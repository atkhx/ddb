// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package bptree is a generated GoMock package.
package bptree

import (
	reflect "reflect"

	base "github.com/atkhx/ddb/pkg/base"
	gomock "github.com/golang/mock/gomock"
)

// MockItemProvider is a mock of ItemProvider interface.
type MockItemProvider struct {
	ctrl     *gomock.Controller
	recorder *MockItemProviderMockRecorder
}

// MockItemProviderMockRecorder is the mock recorder for MockItemProvider.
type MockItemProviderMockRecorder struct {
	mock *MockItemProvider
}

// NewMockItemProvider creates a new mock instance.
func NewMockItemProvider(ctrl *gomock.Controller) *MockItemProvider {
	mock := &MockItemProvider{ctrl: ctrl}
	mock.recorder = &MockItemProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemProvider) EXPECT() *MockItemProviderMockRecorder {
	return m.recorder
}

// GetNewBranch mocks base method.
func (m *MockItemProvider) GetNewBranch() (*item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewBranch")
	ret0, _ := ret[0].(*item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewBranch indicates an expected call of GetNewBranch.
func (mr *MockItemProviderMockRecorder) GetNewBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewBranch", reflect.TypeOf((*MockItemProvider)(nil).GetNewBranch))
}

// GetNewLeaf mocks base method.
func (m *MockItemProvider) GetNewLeaf() (*item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewLeaf")
	ret0, _ := ret[0].(*item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewLeaf indicates an expected call of GetNewLeaf.
func (mr *MockItemProviderMockRecorder) GetNewLeaf() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewLeaf", reflect.TypeOf((*MockItemProvider)(nil).GetNewLeaf))
}

// GetRootItem mocks base method.
func (m *MockItemProvider) GetRootItem() (*item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootItem")
	ret0, _ := ret[0].(*item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootItem indicates an expected call of GetRootItem.
func (mr *MockItemProviderMockRecorder) GetRootItem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootItem", reflect.TypeOf((*MockItemProvider)(nil).GetRootItem))
}

// LoadItem mocks base method.
func (m *MockItemProvider) LoadItem(arg0 ItemID) (*item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadItem", arg0)
	ret0, _ := ret[0].(*item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadItem indicates an expected call of LoadItem.
func (mr *MockItemProviderMockRecorder) LoadItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadItem", reflect.TypeOf((*MockItemProvider)(nil).LoadItem), arg0)
}

// SaveItem mocks base method.
func (m *MockItemProvider) SaveItem(arg0 *item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveItem", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveItem indicates an expected call of SaveItem.
func (mr *MockItemProviderMockRecorder) SaveItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveItem", reflect.TypeOf((*MockItemProvider)(nil).SaveItem), arg0)
}

// MockTree is a mock of Tree interface.
type MockTree struct {
	ctrl     *gomock.Controller
	recorder *MockTreeMockRecorder
}

// MockTreeMockRecorder is the mock recorder for MockTree.
type MockTreeMockRecorder struct {
	mock *MockTree
}

// NewMockTree creates a new mock instance.
func NewMockTree(ctrl *gomock.Controller) *MockTree {
	mock := &MockTree{ctrl: ctrl}
	mock.recorder = &MockTreeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTree) EXPECT() *MockTreeMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTree) Get(arg0 base.Key) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTreeMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTree)(nil).Get), arg0)
}

// ScanASC mocks base method.
func (m *MockTree) ScanASC(fn func(interface{}) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanASC", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanASC indicates an expected call of ScanASC.
func (mr *MockTreeMockRecorder) ScanASC(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanASC", reflect.TypeOf((*MockTree)(nil).ScanASC), fn)
}

// ScanDESC mocks base method.
func (m *MockTree) ScanDESC(fn func(interface{}) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanDESC", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanDESC indicates an expected call of ScanDESC.
func (mr *MockTreeMockRecorder) ScanDESC(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanDESC", reflect.TypeOf((*MockTree)(nil).ScanDESC), fn)
}

// Set mocks base method.
func (m *MockTree) Set(arg0 base.Key, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockTreeMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTree)(nil).Set), arg0, arg1)
}

// MockItemID is a mock of ItemID interface.
type MockItemID struct {
	ctrl     *gomock.Controller
	recorder *MockItemIDMockRecorder
}

// MockItemIDMockRecorder is the mock recorder for MockItemID.
type MockItemIDMockRecorder struct {
	mock *MockItemID
}

// NewMockItemID creates a new mock instance.
func NewMockItemID(ctrl *gomock.Controller) *MockItemID {
	mock := &MockItemID{ctrl: ctrl}
	mock.recorder = &MockItemIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemID) EXPECT() *MockItemIDMockRecorder {
	return m.recorder
}
