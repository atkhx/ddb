// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package storage is a generated GoMock package.
package storage

import (
	reflect "reflect"
	time "time"

	internal "github.com/atkhx/ddb/internal"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockStorage) Begin(options ...TxOpt) TxObj {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Begin", varargs...)
	ret0, _ := ret[0].(TxObj)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MockStorageMockRecorder) Begin(options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockStorage)(nil).Begin), options...)
}

// Commit mocks base method.
func (m *MockStorage) Commit(arg0 TxObj) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockStorageMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockStorage)(nil).Commit), arg0)
}

// Get mocks base method.
func (m *MockStorage) Get(arg0 internal.Key) (internal.Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(internal.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), arg0)
}

// LockKeys mocks base method.
func (m *MockStorage) LockKeys(txObj TxObj, keys []internal.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockKeys", txObj, keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockKeys indicates an expected call of LockKeys.
func (mr *MockStorageMockRecorder) LockKeys(txObj, keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockKeys", reflect.TypeOf((*MockStorage)(nil).LockKeys), txObj, keys)
}

// Rollback mocks base method.
func (m *MockStorage) Rollback(arg0 TxObj) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockStorageMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockStorage)(nil).Rollback), arg0)
}

// Set mocks base method.
func (m *MockStorage) Set(key internal.Key, row internal.Row) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, row)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStorageMockRecorder) Set(key, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStorage)(nil).Set), key, row)
}

// TxGet mocks base method.
func (m *MockStorage) TxGet(arg0 TxObj, arg1 internal.Key) (internal.Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxGet", arg0, arg1)
	ret0, _ := ret[0].(internal.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxGet indicates an expected call of TxGet.
func (mr *MockStorageMockRecorder) TxGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxGet", reflect.TypeOf((*MockStorage)(nil).TxGet), arg0, arg1)
}

// TxGetForUpdate mocks base method.
func (m *MockStorage) TxGetForUpdate(arg0 TxObj, arg1 internal.Key) (internal.Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxGetForUpdate", arg0, arg1)
	ret0, _ := ret[0].(internal.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxGetForUpdate indicates an expected call of TxGetForUpdate.
func (mr *MockStorageMockRecorder) TxGetForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxGetForUpdate", reflect.TypeOf((*MockStorage)(nil).TxGetForUpdate), arg0, arg1)
}

// TxSet mocks base method.
func (m *MockStorage) TxSet(arg0 TxObj, arg1 internal.Key, arg2 internal.Row) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxSet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// TxSet indicates an expected call of TxSet.
func (mr *MockStorageMockRecorder) TxSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxSet", reflect.TypeOf((*MockStorage)(nil).TxSet), arg0, arg1, arg2)
}

// MockTxManager is a mock of TxManager interface.
type MockTxManager struct {
	ctrl     *gomock.Controller
	recorder *MockTxManagerMockRecorder
}

// MockTxManagerMockRecorder is the mock recorder for MockTxManager.
type MockTxManagerMockRecorder struct {
	mock *MockTxManager
}

// NewMockTxManager creates a new mock instance.
func NewMockTxManager(ctrl *gomock.Controller) *MockTxManager {
	mock := &MockTxManager{ctrl: ctrl}
	mock.recorder = &MockTxManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxManager) EXPECT() *MockTxManagerMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockTxManager) Begin(options ...TxOpt) TxObj {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Begin", varargs...)
	ret0, _ := ret[0].(TxObj)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MockTxManagerMockRecorder) Begin(options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockTxManager)(nil).Begin), options...)
}

// Commit mocks base method.
func (m *MockTxManager) Commit(arg0 TxObj) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxManagerMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTxManager)(nil).Commit), arg0)
}

// Get mocks base method.
func (m *MockTxManager) Get(arg0 TxObj, arg1 internal.Key) (internal.Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(internal.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTxManagerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTxManager)(nil).Get), arg0, arg1)
}

// Rollback mocks base method.
func (m *MockTxManager) Rollback(arg0 TxObj) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTxManagerMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTxManager)(nil).Rollback), arg0)
}

// Set mocks base method.
func (m *MockTxManager) Set(arg0 TxObj, arg1 internal.Key, arg2 internal.Row) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockTxManagerMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTxManager)(nil).Set), arg0, arg1, arg2)
}

// MockTxFactory is a mock of TxFactory interface.
type MockTxFactory struct {
	ctrl     *gomock.Controller
	recorder *MockTxFactoryMockRecorder
}

// MockTxFactoryMockRecorder is the mock recorder for MockTxFactory.
type MockTxFactoryMockRecorder struct {
	mock *MockTxFactory
}

// NewMockTxFactory creates a new mock instance.
func NewMockTxFactory(ctrl *gomock.Controller) *MockTxFactory {
	mock := &MockTxFactory{ctrl: ctrl}
	mock.recorder = &MockTxFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxFactory) EXPECT() *MockTxFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTxFactory) Create(arg0 ...TxOpt) TxObj {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(TxObj)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTxFactoryMockRecorder) Create(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTxFactory)(nil).Create), arg0...)
}

// MockRWTabFactory is a mock of RWTabFactory interface.
type MockRWTabFactory struct {
	ctrl     *gomock.Controller
	recorder *MockRWTabFactoryMockRecorder
}

// MockRWTabFactoryMockRecorder is the mock recorder for MockRWTabFactory.
type MockRWTabFactoryMockRecorder struct {
	mock *MockRWTabFactory
}

// NewMockRWTabFactory creates a new mock instance.
func NewMockRWTabFactory(ctrl *gomock.Controller) *MockRWTabFactory {
	mock := &MockRWTabFactory{ctrl: ctrl}
	mock.recorder = &MockRWTabFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRWTabFactory) EXPECT() *MockRWTabFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRWTabFactory) Create() RWTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(RWTable)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRWTabFactoryMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRWTabFactory)(nil).Create))
}

// MockTxIsolation is a mock of TxIsolation interface.
type MockTxIsolation struct {
	ctrl     *gomock.Controller
	recorder *MockTxIsolationMockRecorder
}

// MockTxIsolationMockRecorder is the mock recorder for MockTxIsolation.
type MockTxIsolationMockRecorder struct {
	mock *MockTxIsolation
}

// NewMockTxIsolation creates a new mock instance.
func NewMockTxIsolation(ctrl *gomock.Controller) *MockTxIsolation {
	mock := &MockTxIsolation{ctrl: ctrl}
	mock.recorder = &MockTxIsolationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxIsolation) EXPECT() *MockTxIsolationMockRecorder {
	return m.recorder
}

// IsReadable mocks base method.
func (m *MockTxIsolation) IsReadable(originTx, txObj TxObj) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReadable", originTx, txObj)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReadable indicates an expected call of IsReadable.
func (mr *MockTxIsolationMockRecorder) IsReadable(originTx, txObj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReadable", reflect.TypeOf((*MockTxIsolation)(nil).IsReadable), originTx, txObj)
}

// SkipLocked mocks base method.
func (m *MockTxIsolation) SkipLocked() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SkipLocked")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SkipLocked indicates an expected call of SkipLocked.
func (mr *MockTxIsolationMockRecorder) SkipLocked() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkipLocked", reflect.TypeOf((*MockTxIsolation)(nil).SkipLocked))
}

// MockTxRow is a mock of TxRow interface.
type MockTxRow struct {
	ctrl     *gomock.Controller
	recorder *MockTxRowMockRecorder
}

// MockTxRowMockRecorder is the mock recorder for MockTxRow.
type MockTxRowMockRecorder struct {
	mock *MockTxRow
}

// NewMockTxRow creates a new mock instance.
func NewMockTxRow(ctrl *gomock.Controller) *MockTxRow {
	mock := &MockTxRow{ctrl: ctrl}
	mock.recorder = &MockTxRowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxRow) EXPECT() *MockTxRowMockRecorder {
	return m.recorder
}

// GetTxObj mocks base method.
func (m *MockTxRow) GetTxObj() TxObj {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxObj")
	ret0, _ := ret[0].(TxObj)
	return ret0
}

// GetTxObj indicates an expected call of GetTxObj.
func (mr *MockTxRowMockRecorder) GetTxObj() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxObj", reflect.TypeOf((*MockTxRow)(nil).GetTxObj))
}

// GetTxRow mocks base method.
func (m *MockTxRow) GetTxRow() internal.Row {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxRow")
	ret0, _ := ret[0].(internal.Row)
	return ret0
}

// GetTxRow indicates an expected call of GetTxRow.
func (mr *MockTxRowMockRecorder) GetTxRow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxRow", reflect.TypeOf((*MockTxRow)(nil).GetTxRow))
}

// MockRWTable is a mock of RWTable interface.
type MockRWTable struct {
	ctrl     *gomock.Controller
	recorder *MockRWTableMockRecorder
}

// MockRWTableMockRecorder is the mock recorder for MockRWTable.
type MockRWTableMockRecorder struct {
	mock *MockRWTable
}

// NewMockRWTable creates a new mock instance.
func NewMockRWTable(ctrl *gomock.Controller) *MockRWTable {
	mock := &MockRWTable{ctrl: ctrl}
	mock.recorder = &MockRWTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRWTable) EXPECT() *MockRWTableMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRWTable) Get(arg0 internal.Key) ([]TxRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]TxRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRWTableMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRWTable)(nil).Get), arg0)
}

// Set mocks base method.
func (m *MockRWTable) Set(arg0 TxObj, arg1 internal.Key, arg2 internal.Row) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRWTableMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRWTable)(nil).Set), arg0, arg1, arg2)
}

// MockROTable is a mock of ROTable interface.
type MockROTable struct {
	ctrl     *gomock.Controller
	recorder *MockROTableMockRecorder
}

// MockROTableMockRecorder is the mock recorder for MockROTable.
type MockROTableMockRecorder struct {
	mock *MockROTable
}

// NewMockROTable creates a new mock instance.
func NewMockROTable(ctrl *gomock.Controller) *MockROTable {
	mock := &MockROTable{ctrl: ctrl}
	mock.recorder = &MockROTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockROTable) EXPECT() *MockROTableMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockROTable) Get(arg0 internal.Key) (internal.Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(internal.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockROTableMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockROTable)(nil).Get), arg0)
}

// MockROTables is a mock of ROTables interface.
type MockROTables struct {
	ctrl     *gomock.Controller
	recorder *MockROTablesMockRecorder
}

// MockROTablesMockRecorder is the mock recorder for MockROTables.
type MockROTablesMockRecorder struct {
	mock *MockROTables
}

// NewMockROTables creates a new mock instance.
func NewMockROTables(ctrl *gomock.Controller) *MockROTables {
	mock := &MockROTables{ctrl: ctrl}
	mock.recorder = &MockROTablesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockROTables) EXPECT() *MockROTablesMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockROTables) Get(arg0 internal.Key) (internal.Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(internal.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockROTablesMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockROTables)(nil).Get), arg0)
}

// Grow mocks base method.
func (m *MockROTables) Grow(arg0 ROTable) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Grow", arg0)
}

// Grow indicates an expected call of Grow.
func (mr *MockROTablesMockRecorder) Grow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Grow", reflect.TypeOf((*MockROTables)(nil).Grow), arg0)
}

// MockLocks is a mock of Locks interface.
type MockLocks struct {
	ctrl     *gomock.Controller
	recorder *MockLocksMockRecorder
}

// MockLocksMockRecorder is the mock recorder for MockLocks.
type MockLocksMockRecorder struct {
	mock *MockLocks
}

// NewMockLocks creates a new mock instance.
func NewMockLocks(ctrl *gomock.Controller) *MockLocks {
	mock := &MockLocks{ctrl: ctrl}
	mock.recorder = &MockLocksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocks) EXPECT() *MockLocksMockRecorder {
	return m.recorder
}

// InitLock mocks base method.
func (m *MockLocks) InitLock(txID int64, key internal.Key) (waitChan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitLock", txID, key)
	ret0, _ := ret[0].(waitChan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitLock indicates an expected call of InitLock.
func (mr *MockLocksMockRecorder) InitLock(txID, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitLock", reflect.TypeOf((*MockLocks)(nil).InitLock), txID, key)
}

// InitLocks mocks base method.
func (m *MockLocks) InitLocks(txID int64, keys ...internal.Key) ([]waitChan, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{txID}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitLocks", varargs...)
	ret0, _ := ret[0].([]waitChan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitLocks indicates an expected call of InitLocks.
func (mr *MockLocksMockRecorder) InitLocks(txID interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{txID}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitLocks", reflect.TypeOf((*MockLocks)(nil).InitLocks), varargs...)
}

// Release mocks base method.
func (m *MockLocks) Release(txID int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release", txID)
}

// Release indicates an expected call of Release.
func (mr *MockLocksMockRecorder) Release(txID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockLocks)(nil).Release), txID)
}

// MockTxObj is a mock of TxObj interface.
type MockTxObj struct {
	ctrl     *gomock.Controller
	recorder *MockTxObjMockRecorder
}

// MockTxObjMockRecorder is the mock recorder for MockTxObj.
type MockTxObjMockRecorder struct {
	mock *MockTxObj
}

// NewMockTxObj creates a new mock instance.
func NewMockTxObj(ctrl *gomock.Controller) *MockTxObj {
	mock := &MockTxObj{ctrl: ctrl}
	mock.recorder = &MockTxObjMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxObj) EXPECT() *MockTxObjMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockTxObj) GetID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockTxObjMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockTxObj)(nil).GetID))
}

// GetIsolation mocks base method.
func (m *MockTxObj) GetIsolation() TxIsolation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsolation")
	ret0, _ := ret[0].(TxIsolation)
	return ret0
}

// GetIsolation indicates an expected call of GetIsolation.
func (mr *MockTxObjMockRecorder) GetIsolation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsolation", reflect.TypeOf((*MockTxObj)(nil).GetIsolation))
}

// GetState mocks base method.
func (m *MockTxObj) GetState() TxState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(TxState)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockTxObjMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockTxObj)(nil).GetState))
}

// GetTime mocks base method.
func (m *MockTxObj) GetTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTime indicates an expected call of GetTime.
func (mr *MockTxObjMockRecorder) GetTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTime", reflect.TypeOf((*MockTxObj)(nil).GetTime))
}

// IsReadable mocks base method.
func (m *MockTxObj) IsReadable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReadable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReadable indicates an expected call of IsReadable.
func (mr *MockTxObjMockRecorder) IsReadable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReadable", reflect.TypeOf((*MockTxObj)(nil).IsReadable))
}

// IsWriteable mocks base method.
func (m *MockTxObj) IsWriteable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWriteable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWriteable indicates an expected call of IsWriteable.
func (mr *MockTxObjMockRecorder) IsWriteable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWriteable", reflect.TypeOf((*MockTxObj)(nil).IsWriteable))
}

// commit mocks base method.
func (m *MockTxObj) commit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "commit")
}

// commit indicates an expected call of commit.
func (mr *MockTxObjMockRecorder) commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "commit", reflect.TypeOf((*MockTxObj)(nil).commit))
}

// persist mocks base method.
func (m *MockTxObj) persist() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "persist")
}

// persist indicates an expected call of persist.
func (mr *MockTxObjMockRecorder) persist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "persist", reflect.TypeOf((*MockTxObj)(nil).persist))
}

// rollback mocks base method.
func (m *MockTxObj) rollback() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "rollback")
}

// rollback indicates an expected call of rollback.
func (mr *MockTxObjMockRecorder) rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "rollback", reflect.TypeOf((*MockTxObj)(nil).rollback))
}
