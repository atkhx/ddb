// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package storage is a generated GoMock package.
package storage

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockKey is a mock of Key interface.
type MockKey struct {
	ctrl     *gomock.Controller
	recorder *MockKeyMockRecorder
}

// MockKeyMockRecorder is the mock recorder for MockKey.
type MockKeyMockRecorder struct {
	mock *MockKey
}

// NewMockKey creates a new mock instance.
func NewMockKey(ctrl *gomock.Controller) *MockKey {
	mock := &MockKey{ctrl: ctrl}
	mock.recorder = &MockKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKey) EXPECT() *MockKeyMockRecorder {
	return m.recorder
}

// MockRow is a mock of Row interface.
type MockRow struct {
	ctrl     *gomock.Controller
	recorder *MockRowMockRecorder
}

// MockRowMockRecorder is the mock recorder for MockRow.
type MockRowMockRecorder struct {
	mock *MockRow
}

// NewMockRow creates a new mock instance.
func NewMockRow(ctrl *gomock.Controller) *MockRow {
	mock := &MockRow{ctrl: ctrl}
	mock.recorder = &MockRowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRow) EXPECT() *MockRowMockRecorder {
	return m.recorder
}

// MockTxFactory is a mock of TxFactory interface.
type MockTxFactory struct {
	ctrl     *gomock.Controller
	recorder *MockTxFactoryMockRecorder
}

// MockTxFactoryMockRecorder is the mock recorder for MockTxFactory.
type MockTxFactoryMockRecorder struct {
	mock *MockTxFactory
}

// NewMockTxFactory creates a new mock instance.
func NewMockTxFactory(ctrl *gomock.Controller) *MockTxFactory {
	mock := &MockTxFactory{ctrl: ctrl}
	mock.recorder = &MockTxFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxFactory) EXPECT() *MockTxFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTxFactory) Create() TxObj {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(TxObj)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTxFactoryMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTxFactory)(nil).Create))
}

// MockRWTabFactory is a mock of RWTabFactory interface.
type MockRWTabFactory struct {
	ctrl     *gomock.Controller
	recorder *MockRWTabFactoryMockRecorder
}

// MockRWTabFactoryMockRecorder is the mock recorder for MockRWTabFactory.
type MockRWTabFactoryMockRecorder struct {
	mock *MockRWTabFactory
}

// NewMockRWTabFactory creates a new mock instance.
func NewMockRWTabFactory(ctrl *gomock.Controller) *MockRWTabFactory {
	mock := &MockRWTabFactory{ctrl: ctrl}
	mock.recorder = &MockRWTabFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRWTabFactory) EXPECT() *MockRWTabFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRWTabFactory) Create() RWTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(RWTable)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRWTabFactoryMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRWTabFactory)(nil).Create))
}

// MockTxTables is a mock of TxTables interface.
type MockTxTables struct {
	ctrl     *gomock.Controller
	recorder *MockTxTablesMockRecorder
}

// MockTxTablesMockRecorder is the mock recorder for MockTxTables.
type MockTxTablesMockRecorder struct {
	mock *MockTxTables
}

// NewMockTxTables creates a new mock instance.
func NewMockTxTables(ctrl *gomock.Controller) *MockTxTables {
	mock := &MockTxTables{ctrl: ctrl}
	mock.recorder = &MockTxTablesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxTables) EXPECT() *MockTxTablesMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockTxTables) Begin() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MockTxTablesMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockTxTables)(nil).Begin))
}

// Commit mocks base method.
func (m *MockTxTables) Commit(txID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", txID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxTablesMockRecorder) Commit(txID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTxTables)(nil).Commit), txID)
}

// Get mocks base method.
func (m *MockTxTables) Get(txID int64, key Key) (Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", txID, key)
	ret0, _ := ret[0].(Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTxTablesMockRecorder) Get(txID, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTxTables)(nil).Get), txID, key)
}

// Rollback mocks base method.
func (m *MockTxTables) Rollback(txID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", txID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTxTablesMockRecorder) Rollback(txID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTxTables)(nil).Rollback), txID)
}

// Set mocks base method.
func (m *MockTxTables) Set(txID int64, key Key, row Row) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", txID, key, row)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockTxTablesMockRecorder) Set(txID, key, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTxTables)(nil).Set), txID, key, row)
}

// MockTxAccess is a mock of TxAccess interface.
type MockTxAccess struct {
	ctrl     *gomock.Controller
	recorder *MockTxAccessMockRecorder
}

// MockTxAccessMockRecorder is the mock recorder for MockTxAccess.
type MockTxAccessMockRecorder struct {
	mock *MockTxAccess
}

// NewMockTxAccess creates a new mock instance.
func NewMockTxAccess(ctrl *gomock.Controller) *MockTxAccess {
	mock := &MockTxAccess{ctrl: ctrl}
	mock.recorder = &MockTxAccessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxAccess) EXPECT() *MockTxAccessMockRecorder {
	return m.recorder
}

// IsReadable mocks base method.
func (m *MockTxAccess) IsReadable(originTx, txObj TxObj) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReadable", originTx, txObj)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReadable indicates an expected call of IsReadable.
func (mr *MockTxAccessMockRecorder) IsReadable(originTx, txObj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReadable", reflect.TypeOf((*MockTxAccess)(nil).IsReadable), originTx, txObj)
}

// IsWriteable mocks base method.
func (m *MockTxAccess) IsWriteable(originTx TxObj) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWriteable", originTx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWriteable indicates an expected call of IsWriteable.
func (mr *MockTxAccessMockRecorder) IsWriteable(originTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWriteable", reflect.TypeOf((*MockTxAccess)(nil).IsWriteable), originTx)
}

// MockRWTable is a mock of RWTable interface.
type MockRWTable struct {
	ctrl     *gomock.Controller
	recorder *MockRWTableMockRecorder
}

// MockRWTableMockRecorder is the mock recorder for MockRWTable.
type MockRWTableMockRecorder struct {
	mock *MockRWTable
}

// NewMockRWTable creates a new mock instance.
func NewMockRWTable(ctrl *gomock.Controller) *MockRWTable {
	mock := &MockRWTable{ctrl: ctrl}
	mock.recorder = &MockRWTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRWTable) EXPECT() *MockRWTableMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRWTable) Get(arg0 Key) (Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRWTableMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRWTable)(nil).Get), arg0)
}

// Set mocks base method.
func (m *MockRWTable) Set(arg0 Key, arg1 Row) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRWTableMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRWTable)(nil).Set), arg0, arg1)
}

// MockROTable is a mock of ROTable interface.
type MockROTable struct {
	ctrl     *gomock.Controller
	recorder *MockROTableMockRecorder
}

// MockROTableMockRecorder is the mock recorder for MockROTable.
type MockROTableMockRecorder struct {
	mock *MockROTable
}

// NewMockROTable creates a new mock instance.
func NewMockROTable(ctrl *gomock.Controller) *MockROTable {
	mock := &MockROTable{ctrl: ctrl}
	mock.recorder = &MockROTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockROTable) EXPECT() *MockROTableMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockROTable) Get(arg0 Key) (Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockROTableMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockROTable)(nil).Get), arg0)
}

// MockROTables is a mock of ROTables interface.
type MockROTables struct {
	ctrl     *gomock.Controller
	recorder *MockROTablesMockRecorder
}

// MockROTablesMockRecorder is the mock recorder for MockROTables.
type MockROTablesMockRecorder struct {
	mock *MockROTables
}

// NewMockROTables creates a new mock instance.
func NewMockROTables(ctrl *gomock.Controller) *MockROTables {
	mock := &MockROTables{ctrl: ctrl}
	mock.recorder = &MockROTablesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockROTables) EXPECT() *MockROTablesMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockROTables) Get(arg0 Key) (Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockROTablesMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockROTables)(nil).Get), arg0)
}

// MockLocks is a mock of Locks interface.
type MockLocks struct {
	ctrl     *gomock.Controller
	recorder *MockLocksMockRecorder
}

// MockLocksMockRecorder is the mock recorder for MockLocks.
type MockLocksMockRecorder struct {
	mock *MockLocks
}

// NewMockLocks creates a new mock instance.
func NewMockLocks(ctrl *gomock.Controller) *MockLocks {
	mock := &MockLocks{ctrl: ctrl}
	mock.recorder = &MockLocksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocks) EXPECT() *MockLocksMockRecorder {
	return m.recorder
}

// InitLock mocks base method.
func (m *MockLocks) InitLock(txID int64, key Key) (waitChan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitLock", txID, key)
	ret0, _ := ret[0].(waitChan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitLock indicates an expected call of InitLock.
func (mr *MockLocksMockRecorder) InitLock(txID, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitLock", reflect.TypeOf((*MockLocks)(nil).InitLock), txID, key)
}

// Release mocks base method.
func (m *MockLocks) Release(txID int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release", txID)
}

// Release indicates an expected call of Release.
func (mr *MockLocksMockRecorder) Release(txID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockLocks)(nil).Release), txID)
}

// MockTxObj is a mock of TxObj interface.
type MockTxObj struct {
	ctrl     *gomock.Controller
	recorder *MockTxObjMockRecorder
}

// MockTxObjMockRecorder is the mock recorder for MockTxObj.
type MockTxObjMockRecorder struct {
	mock *MockTxObj
}

// NewMockTxObj creates a new mock instance.
func NewMockTxObj(ctrl *gomock.Controller) *MockTxObj {
	mock := &MockTxObj{ctrl: ctrl}
	mock.recorder = &MockTxObjMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxObj) EXPECT() *MockTxObjMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockTxObj) GetID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockTxObjMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockTxObj)(nil).GetID))
}

// GetState mocks base method.
func (m *MockTxObj) GetState() TxState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(TxState)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockTxObjMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockTxObj)(nil).GetState))
}

// GetTime mocks base method.
func (m *MockTxObj) GetTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTime indicates an expected call of GetTime.
func (mr *MockTxObjMockRecorder) GetTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTime", reflect.TypeOf((*MockTxObj)(nil).GetTime))
}

// commit mocks base method.
func (m *MockTxObj) commit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "commit")
}

// commit indicates an expected call of commit.
func (mr *MockTxObjMockRecorder) commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "commit", reflect.TypeOf((*MockTxObj)(nil).commit))
}

// rollback mocks base method.
func (m *MockTxObj) rollback() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "rollback")
}

// rollback indicates an expected call of rollback.
func (mr *MockTxObjMockRecorder) rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "rollback", reflect.TypeOf((*MockTxObj)(nil).rollback))
}
